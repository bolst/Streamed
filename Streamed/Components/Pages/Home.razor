@page "/"

@inject Services.IStreamService StreamService
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

@foreach (var category in Models.CustomTypes.Categories.All)
{
    var matches = _sportMatches.Where(x => x.category == category).ToList();
    
    <MudDataGrid T="Models.Match" Items="matches" Class="px-4 mb-8 mud-border-secondary border-2" Style="width: 100%;" RowClick="@(x => Navigation.NavigateTo($"/watch/{x.Item.id}"))" RowClass="cursor-pointer" ShowColumnOptions="false" Striped Hover>
        <ToolBarContent>
            <div class="d-flex align-center flex-row gap-3">
                <MudText Typo="Typo.h5"><b>@category.Title.ToUpper()</b></MudText>
                <MudChip T="string" Color="Color.Tertiary" Variant="Variant.Filled" Label="true"><b>@matches.Count EVENTS</b></MudChip>
            </div>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.title" Title="Event" CellStyle="font-weight: bold" Sortable="false"/>
            <PropertyColumn Property="x => x.MatchDate" Title="Date" Format="g" InitialDirection="SortDirection.Descending" Sortable="false"/>
        </Columns>
        <NoRecordsContent>
            No matches
        </NoRecordsContent>
    </MudDataGrid>
}

@code {

    private IEnumerable<Models.Match> _sportMatches = [];

    protected override async Task OnInitializedAsync()
    {
        var matches = await StreamService.GetMatchesAsync(GetMatchType.AllToday);

        _sportMatches = matches
            .Where(x => Models.CustomTypes.Categories.TryGet(x.category, out var _))
            .Where(x => x.MatchDate.Date == DateTime.UtcNow.AddHours(-4).Date)
            .OrderByDescending(x => x.popular)
            .ThenBy(x => x.date);
    }
}