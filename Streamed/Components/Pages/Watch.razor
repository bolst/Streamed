@page "/watch/{MatchId}"

@inject Services.IStreamService StreamService


<PageTitle>Watch</PageTitle>

@if (_loading)
{
    <MudText>loading...</MudText>
}
else
{
    if (_match is null)
    {
        <div class="d-flex align-center justify-center" style="width: 100%; height: 50vh">
            <MudText>No streams found!</MudText>
        </div>
    }
    else
    {
        <div class="d-flex align-center flex-row flex-wrap mb-6">
            <MudText Typo="Typo.h6">@_match.title</MudText>
            <MudFlexBreak />
            <MudChip T="string" Text="@_category?.Title.ToUpper()" Icon="@_category?.Icon" Class="@_category?.IconClass" Variant="Variant.Text" Label="true"/>
            <MudChip T="string" Text="@($"{_match.MatchDate:ddd hh:mmtt} EST")" Icon="@Icons.Material.Filled.AccessTime" Color="Color.Info" Variant="Variant.Text" Label="true" />
        </div>

        <div class="d-flex align-center flex-column flex-wrap" style="width: 100%">
            <MudPaper Class="d-flex align-center justify-center" Width="100%" Height="50vw" MaxHeight="400px">
                @if (_selectedStream is not null)
                {
                    <iframe src="@_selectedStream.embedUrl" allowfullscreen></iframe>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.PlayDisabled" Size="Size.Large" />
                }
            </MudPaper>

            <MudChipSet Class="my-4" Style="width: 100%;" @bind-SelectedValue="_selectedStream" SelectionMode="SelectionMode.ToggleSelection" Color="Color.Default" SelectedColor="Color.Info" Variant="Variant.Filled">
                @foreach(var stream in _selectedSource)
                {
                    <MudChip Value="stream" Text="@($"Stream {stream.streamNo}")" Icon="@(stream.hd ? Icons.Material.Filled.Hd : "")" IconColor="Color.Error" />
                }
            </MudChipSet>

            <MudList Style="width: 100%;" @bind-SelectedValue="_selectedSource" SelectionMode="SelectionMode.SingleSelection" Color="Color.Primary" Dense>
                @foreach(var source in _sources)
                {
                    <MudListItem Value="source.Value" Text="@source.Key.ToUpper()" SecondaryText="@($"{source.Value.Count()} streams")" />
                }
            </MudList>
        </div>
    }
}



@code {

    [Parameter, EditorRequired] 
    public required string MatchId { get; set; }

    private string? _matchId;
    private Models.Match? _match;
    private Models.CustomTypes.Category? _category;
    private Dictionary<string, IEnumerable<Models.MatchStream>> _sources = [];

    private bool _loading;

    private Models.MatchStream? _selectedStream;
    private IEnumerable<Models.MatchStream> _selectedSource = [];

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(MatchId)) return;

        if (!string.IsNullOrEmpty(_matchId) && _matchId == MatchId) return;
        _matchId = MatchId;

        _loading = true;

        var matches = await StreamService.GetMatchesAsync(GetMatchType.AllToday);
        _match = matches.FirstOrDefault(x => x.id == MatchId);

        if (_match is not null)
        {
            foreach(var source in _match.sources)
            {
                var streams = await StreamService.GetMatchStreamsAsync(source.id, source.source);
                _sources.Add(source.source, streams);
            }

            Models.CustomTypes.Categories.TryGet(_match.category, out _category);
            _selectedSource = _sources.FirstOrDefault().Value;
            _selectedStream = _selectedSource.FirstOrDefault();
        }

        _loading = false;
        StateHasChanged();
    }
}